// This file was automatically generated by VS extension Windows Machine Learning Code Generator v3
// from model file u2net.onnx
// Warning: This file may get overwritten if you add add an onnx file with the same name
using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Windows.Media;
using Windows.Storage;
using Windows.Storage.Streams;
using Microsoft.AI.MachineLearning;
namespace UwpMl
{
    
    public sealed class u2netInput
    {
        public TensorFloat input; // shape(1,3,320,320)
    }
    
    public sealed class u2netOutput
    {
        public TensorFloat o0; // shape(1,1,320,320)
        public TensorFloat o1; // shape(1,1,320,320)
        public TensorFloat o2; // shape(1,1,320,320)
        public TensorFloat o3; // shape(1,1,320,320)
        public TensorFloat o4; // shape(1,1,320,320)
        public TensorFloat o5; // shape(1,1,320,320)
        public TensorFloat o6; // shape(1,1,320,320)
    }
    
    public sealed class u2netModel
    {
        private LearningModel model;
        private LearningModelSession session;
        private LearningModelBinding binding;
        public static async Task<u2netModel> CreateFromStreamAsync(IRandomAccessStreamReference stream)
        {
            u2netModel learningModel = new u2netModel();
            learningModel.model = await LearningModel.LoadFromStreamAsync(stream);
            learningModel.session = new LearningModelSession(learningModel.model);
            learningModel.binding = new LearningModelBinding(learningModel.session);
            return learningModel;
        }
        public async Task<u2netOutput> EvaluateAsync(u2netInput input)
        {
            binding.Bind("input", input.input);
            var result = await session.EvaluateAsync(binding, "0");
            var output = new u2netOutput();
            output.o0 = result.Outputs["o0"] as TensorFloat;
            output.o1 = result.Outputs["o1"] as TensorFloat;
            output.o2 = result.Outputs["o2"] as TensorFloat;
            output.o3 = result.Outputs["o3"] as TensorFloat;
            output.o4 = result.Outputs["o4"] as TensorFloat;
            output.o5 = result.Outputs["o5"] as TensorFloat;
            output.o6 = result.Outputs["o6"] as TensorFloat;
            return output;
        }
    }
}

